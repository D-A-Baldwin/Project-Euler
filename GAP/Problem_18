# Find the maximum total from top to bottom of the triangle below:

triangle := 
[[75],
[95,64],
[17,47,82],
[18,35,87,10],
[20,04,82,47,65],
[19,01,23,75,03,34],
[88,02,77,73,07,63,67],
[99,65,04,28,06,16,70,92],
[41,41,26,56,83,40,80,70,33],
[41,48,72,33,47,32,37,16,94,29],
[53,71,44,65,25,43,91,52,97,51,14],
[70,11,33,28,77,73,17,78,39,68,17,57],
[91,71,52,38,17,14,91,43,58,50,27,29,48],
[63,66,04,68,89,53,67,30,73,16,69,87,40,31],
[04,62,98,27,23,09,70,98,73,93,38,53,60,04,23]];;

# Think of the numbers as nodes connected by edges. The weight
# of the edges between nodes on the last and the second to last
# layer is the sum of the nodes at its ends. The weight of 
# edges between the higher layers is the sum of the node above it 
# with the maximum of the two weights of the edges connecting
# to the node below it. The answer is then the maximum of the 
# two weights between the first and second layer.

WeightsOfEdges := function(tri)
  local num_rows, weights, i, weights_row, j, sublist, last_layer;

  num_rows := Length(tri);
  weights := [];
  last_layer := [];
  i := num_rows - 1;
  for j in [1..Length(tri[i])] do
      sublist := [];
      Add(sublist, tri[i][j] + tri[i+1][j]);
      Add(sublist, tri[i][j] + tri[i+1][j+1]);
      Add(last_layer, sublist);
  od;
  Add(weights, last_layer);

  for i in [num_rows - 2, num_rows - 3 .. 1] do
    weights_row := [];
    for j in [1..Length(tri[i])] do
      sublist := [];
      Add(sublist, tri[i][j] + Maximum(weights[num_rows - i - 1][j]));
      Add(sublist, tri[i][j] + Maximum(weights[num_rows - i - 1][j+1]));
      Add(weights_row, sublist);
    od;
    Add(weights, weights_row);
  od;

  return weights;
end;

HeaviestPath := function(tri)
  local weights;
  weights := WeightsOfEdges(tri);
  return Maximum(Last(weights)[1]);
end;

Print("Answer is: ", HeaviestPath(triangle));
